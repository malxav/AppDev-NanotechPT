    public static void preemptivePriorityScheduling(int[] process, int[] burst_time, int[] arrival_time, int[] priority) {
    int n = process.length;
    int completed = 0;
    int current_time = 0;

    int[] remaining_time = new int[n];
    int[] waiting_time = new int[n];
    int[] turnaround_time = new int[n];

    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }

    System.out.println("PROCESS\tARRIVAL TIME\tBURST TIME\tPRIORITY\tWAITING TIME\tTURNAROUND TIME");

    while (completed != n) {
        int selected_process = -1;
        int highest_priority = Integer.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            if (arrival_time[i] <= current_time && remaining_time[i] > 0 && priority[i] < highest_priority) {
                selected_process = i;
                highest_priority = priority[i];
            }
        }

        if (selected_process == -1) {
            current_time++;
        } else {
            remaining_time[selected_process]--;
            current_time++;

            if (remaining_time[selected_process] <= 0) {
                completed++;
                waiting_time[selected_process] = current_time - arrival_time[selected_process] - burst_time[selected_process];
                turnaround_time[selected_process] = current_time - arrival_time[selected_process];

                System.out.println("p" + process[selected_process] + "\t\t" + arrival_time[selected_process] +
                        "\t\t" + burst_time[selected_process] + "\t\t" + priority[selected_process] +
                        "\t\t" + waiting_time[selected_process] + "\t\t" + turnaround_time[selected_process]);
            }
        }
    }
}