import java.util.Arrays;
import java.util.Random;


import java.util.Date;


// Fibonacci class
class Fibonacci extends Thread {
    private int n;

    public Fibonacci(int n) {
        this.n = n;
    }
    public void run() {
        long start = System.currentTimeMillis();
        long pid = ProcessHandle.current().pid();
        int[] fib = new int[n];
        fib[0] = 0;
        fib[1] = 1;

        for (int i = 2; i < n; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];
        }

        System.out.println("Fibonacci Sequence:");
        for (int i = 0; i < n; i++) {
            System.out.print(fib[i] + " ");
        }
        System.out.println();
        long end = System.currentTimeMillis();
        long time_spent = end - start;
        System.out.println("Processing time: " +pid +"s");
    }
}

// Square class
class Square extends Thread {
    private int number;

    public Square(int number) {
        this.number = number;
    }

    public void run() {
        long start = System.currentTimeMillis();
        long pid = ProcessHandle.current().pid();
        int square = number * number;
        System.out.println("Square of " + number + ": " + square);
        long end = System.currentTimeMillis();
        long time_spent = end - start;
        System.out.println("Processing time: " +pid +"s");
    }
}

// SortNumbers class
class SortNumbers extends Thread {
    private int[] numbers;

    public SortNumbers(int[] numbers) {
        this.numbers = numbers;
    }

    public void run() {
        long start = System.currentTimeMillis();
        long pid = ProcessHandle.current().pid();
        Arrays.sort(numbers);
        System.out.println("Sorted Numbers:");
        for (int i = 0; i < numbers.length; i++) {
            System.out.print(numbers[i] + " ");
        }
        System.out.println();
        long end = System.currentTimeMillis();
        long time_spent = end - start;
        System.out.println("Processing time: " +pid + "s");
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Random random = new Random();

        int[] numbers = new int[5];
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = random.nextInt(100);
        }

        int fibonacciN = random.nextInt(10) + 1;
        int squareNumber = random.nextInt(10) + 1;

        Fibonacci fibonacciThread = new Fibonacci(fibonacciN);
        Square squareThread = new Square(squareNumber);
        SortNumbers sortNumbersThread = new SortNumbers(numbers);

        Date currentDate = getCurrentDate();
        System.out.println("Date and Time: " + currentDate);

        try {
            fibonacciThread.start();
            fibonacciThread.join();
            squareThread.start();
            squareThread.join();
            sortNumbersThread.start();
            sortNumbersThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static Date getCurrentDate() {
        return new Date();
    }
}